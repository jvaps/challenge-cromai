{"version":3,"sources":["components/Form.jsx","components/Input.jsx","components/Select.jsx","components/Result.jsx","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","onSubmit","children","onClick","Input","type","placeholder","onChange","name","value","Select","Result","Home","useState","body","setBody","show","setShow","result","setResult","handleChange","e","target","values","handleSubmit","preventDefault","a","c","b","alert","fetch","then","response","status","json","data","console","log","error","validateField","measure","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAceA,EAZF,SAACC,GACZ,OACE,uBAAMC,UAAU,OAAOC,SAAUF,EAAME,SAAvC,UACGF,EAAMG,SAEP,wBAAQF,UAAU,SAASG,QAASJ,EAAMI,QAA1C,0BCSSC,G,YAdD,SAACL,GACX,OACI,uBACAC,UAAU,QACVK,KAAK,SACLC,YAAW,yBAAoBP,EAAMO,aACrCC,SAAUR,EAAMQ,SAChBC,KAAMT,EAAMS,KACZC,MAAOV,EAAMU,UCANC,EAVA,SAACX,GACd,OACE,yBAAQQ,SAAUR,EAAMQ,SAAUC,KAAMT,EAAMS,KAAMC,MAAOV,EAAMU,MAAjE,UACE,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,oBCKSE,G,MARA,SAACZ,GACZ,OACI,qBAAKC,UAAU,SAAf,SACKD,EAAMG,aCqFJU,EAnFF,WACT,MAAwBC,mBAAS,CAAE,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,QAAW,OAAzE,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,oBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAGA,SAASC,EAAaC,GAClB,IAAMb,EAAOa,EAAEC,OAAOd,KAChBC,EAAQY,EAAEC,OAAOb,MACvBM,GAAQ,SAAAQ,GAAM,kCAAUA,GAAV,kBAAmBf,EAAOC,OAI5C,SAASe,EAAaH,GAClBA,EAAEI,iBAGN,WACI,KAAgB,KAAXX,EAAKY,GAAuB,KAAXZ,EAAKa,GAAyB,KAAXb,EAAKY,GAAuB,KAAXZ,EAAKc,GAAyB,KAAXd,EAAKc,GAAuB,KAAXd,EAAKa,GAG9F,OAAOE,MAAM,kEAKlBC,MAAM,UAAD,OAAWhB,EAAKY,EAAhB,cAAuBZ,EAAKc,EAA5B,cAAmCd,EAAKa,IAAKI,MAAK,SAAAC,GACnD,GAAwB,MAApBA,EAASC,OACT,OAAOD,EAASE,UAGnBH,MAAK,SAAAI,GACFC,QAAQC,IAAIF,GACZhB,EAAUgB,GACVlB,GAAQ,MAEXc,MAAK,SAAAO,GAAK,OAAIF,QAAQC,IAAIC,MArB/BC,GAyBJ,OACI,sBAAKvC,UAAU,OAAf,UACI,eAAC,EAAD,CACIG,QAASqB,EACTvB,SAAUuB,EAFd,UAII,cAAC,EAAD,CACIlB,YAAa,gBACbC,SAAUa,EACVZ,KAAK,IACLC,MAAOK,EAAKY,GAAK,KAGrB,cAAC,EAAD,CACIpB,YAAa,mBACbC,SAAUa,EACVZ,KAAK,IACLC,MAAOK,EAAKc,GAAK,KAGrB,cAAC,EAAD,CACItB,YAAa,sBACbC,SAAUa,EACVZ,KAAK,IACLC,MAAOK,EAAKa,GAAK,KAGrB,cAAC,EAAD,CACIpB,SAAUa,EACVZ,KAAK,UACLC,MAAOK,EAAK0B,SAAW,QAE/B,cAAC,EAAD,UACKxB,GACGE,EAAS,8BAAMA,EAAS,IAAMJ,EAAK0B,UAEnC,sHCzELC,MARf,WACE,OACE,qBAAKzC,UAAU,MAAf,SACE,cAAC,EAAD,OCOS0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e1608a4b.chunk.js","sourcesContent":["import \"../styles/Form.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form className=\"form\" onSubmit={props.onSubmit}>\r\n      {props.children}\r\n\r\n      <button className=\"button\" onClick={props.onClick}>\r\n        Calcular\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import \"../styles/Input.css\"\r\n\r\nconst Input = (props) => {\r\n    return ( \r\n        <input\r\n        className=\"input\"\r\n        type=\"number\"\r\n        placeholder={`Digite o valor ${props.placeholder}`}\r\n        onChange={props.onChange}\r\n        name={props.name}\r\n        value={props.value}\r\n        >\r\n        </input>\r\n     );\r\n}\r\n \r\nexport default Input;","const Select = (props) => {\r\n  return (\r\n    <select onChange={props.onChange} name={props.name} value={props.value}>\r\n      <option value=\"cm\">cm</option>\r\n      <option value=\"m\">m</option>\r\n      <option value=\"km\">km</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import \"../styles/Result.css\"\r\n\r\nconst Result = (props) => {\r\n    return ( \r\n        <div className=\"result\">\r\n            {props.children}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import Form from '../components/Form'\r\nimport { useState } from \"react\";\r\nimport '../styles/Home.css'\r\n\r\nimport Input from '../components/Input';\r\nimport Select from '../components/Select';\r\nimport Result from '../components/Result'\r\nconst Home = () => {\r\n    const [body, setBody] = useState({ \"a\": '', \"b\": '', \"c\": '', \"measure\": \"cm\" })\r\n    const [show, setShow] = useState(false)\r\n    const [result, setResult] = useState('')\r\n\r\n    // Atualiza o hook body com o valores digitados nos campos de input\r\n    function handleChange(e) {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        setBody(values => ({ ...values, [name]: value }))\r\n    }\r\n    // Ao clicar em CALCULAR faz uma simples validação dos campos e caso passe, envia o payload ao back end\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        validateField()\r\n    }\r\n    function validateField() {\r\n        if ((body.a !== '' && body.c !== '') || (body.a !== '' && body.b !== '') || (body.b !== '' && body.c !== '')) {\r\n            getData()\r\n        }\r\n        else return alert('Pelo menos dois campos são necessários para o cálculo')\r\n    }\r\n\r\n    // Como no desafio se tratava de apenas uma requisição, foi usado query string parameters com os valores dos campos do hook body\r\n    function getData() {\r\n        fetch(`/get?a=${body.a}&b=${body.b}&c=${body.c}`).then(response => {\r\n            if (response.status === 200) {\r\n                return response.json()\r\n            }\r\n        })\r\n            .then(data => {\r\n                console.log(data)\r\n                setResult(data)\r\n                setShow(true)\r\n            })\r\n            .then(error => console.log(error))\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Form\r\n                onClick={handleSubmit}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <Input\r\n                    placeholder={'da Hipotenusa'}\r\n                    onChange={handleChange}\r\n                    name=\"a\"\r\n                    value={body.a || ''}\r\n                >\r\n                </Input>\r\n                <Input\r\n                    placeholder={'do Cateto Oposto'}\r\n                    onChange={handleChange}\r\n                    name=\"b\"\r\n                    value={body.b || ''}\r\n                >\r\n                </Input>\r\n                <Input\r\n                    placeholder={'do Cateto Adjacente'}\r\n                    onChange={handleChange}\r\n                    name=\"c\"\r\n                    value={body.c || ''}\r\n                >\r\n                </Input>\r\n                <Select\r\n                    onChange={handleChange}\r\n                    name=\"measure\"\r\n                    value={body.measure || ''} />\r\n            </Form>\r\n            <Result>\r\n                {show &&\r\n                    result ? <div>{result + \" \" + body.measure}</div>\r\n                    :\r\n                    <div>Ainda não é possível verificar se é um triângulo pitagórico</div>\r\n\r\n                }</Result>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import './App.css';\nimport Home from './pages/Home';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}